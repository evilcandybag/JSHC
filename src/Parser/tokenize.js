JSHC.Parser.tokenize = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_start(context) {
        var cacheKey = "start" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_whitespace(context);
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_lexeme(context);
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result3 = parse_whitespace(context);
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_lexeme(context);
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lexeme(context) {
        var cacheKey = "lexeme" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result12 = parse_varid_e(context);
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var result11 = parse_conid_e(context);
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var result10 = parse_varsym_e(context);
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var result9 = parse_consym_e(context);
              if (result9 !== null) {
                var result0 = result9;
              } else {
                var result8 = parse_qvarid(context);
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var result7 = parse_qconid(context);
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    var result6 = parse_qvarsym(context);
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      var result5 = parse_qconsym(context);
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        var result4 = parse_literal(context);
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          var result3 = parse_special(context);
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            var result2 = parse_reservedop(context);
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              var result1 = parse_reservedid(context);
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal(context) {
        var cacheKey = "literal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_integer(context);
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_float(context);
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_char(context);
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_string(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_special(context) {
        var cacheKey = "special" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "(") {
          var result10 = "(";
          pos += 1;
        } else {
          var result10 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          if (input.substr(pos, 1) === ")") {
            var result9 = ")";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(")"));
            }
          }
          if (result9 !== null) {
            var result1 = result9;
          } else {
            if (input.substr(pos, 1) === ",") {
              var result8 = ",";
              pos += 1;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result8 !== null) {
              var result1 = result8;
            } else {
              if (input.substr(pos, 1) === ";") {
                var result7 = ";";
                pos += 1;
              } else {
                var result7 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(";"));
                }
              }
              if (result7 !== null) {
                var result1 = result7;
              } else {
                if (input.substr(pos, 1) === "[") {
                  var result6 = "[";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("["));
                  }
                }
                if (result6 !== null) {
                  var result1 = result6;
                } else {
                  if (input.substr(pos, 1) === "]") {
                    var result5 = "]";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("]"));
                    }
                  }
                  if (result5 !== null) {
                    var result1 = result5;
                  } else {
                    if (input.substr(pos, 1) === "`") {
                      var result4 = "`";
                      pos += 1;
                    } else {
                      var result4 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("`"));
                      }
                    }
                    if (result4 !== null) {
                      var result1 = result4;
                    } else {
                      if (input.substr(pos, 1) === "{") {
                        var result3 = "{";
                        pos += 1;
                      } else {
                        var result3 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("{"));
                        }
                      }
                      if (result3 !== null) {
                        var result1 = result3;
                      } else {
                        if (input.substr(pos, 1) === "}") {
                          var result2 = "}";
                          pos += 1;
                        } else {
                          var result2 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("}"));
                          }
                        }
                        if (result2 !== null) {
                          var result1 = result2;
                        } else {
                          var result1 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(s) {return {val: s, typ: s}})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace(context) {
        var cacheKey = "whitespace" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_whitestuff(context);
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_whitestuff(context);
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(w) {return {val: w.join("")}})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitestuff(context) {
        var cacheKey = "whitestuff" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_whitechar(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_comment(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_ncomment(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitechar(context) {
        var cacheKey = "whitechar" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_newline(context);
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_vertab(context);
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_space(context);
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_tab(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newline(context) {
        var cacheKey = "newline" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_return(context);
        if (result4 !== null) {
          var result5 = parse_linefeed(context);
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_linefeed(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_formfeed(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_return(context) {
        var cacheKey = "return" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "\r") {
          var result0 = "\r";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\r"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_linefeed(context) {
        var cacheKey = "linefeed" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "\n") {
          var result0 = "\n";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\n"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vertab(context) {
        var cacheKey = "vertab" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "") {
          var result0 = "";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(""));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_formfeed(context) {
        var cacheKey = "formfeed" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "") {
          var result0 = "";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(""));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space(context) {
        var cacheKey = "space" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result0 = " ";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tab(context) {
        var cacheKey = "tab" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "	") {
          var result0 = "	";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("	"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment(context) {
        var cacheKey = "comment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_dashes(context);
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          var result11 = parse_symbol(context);
          context.reportMatchFailures = savedReportMatchFailuresVar0;
          if (result11 === null) {
            var result9 = '';
          } else {
            var result9 = null;
            pos = savedPos3;
          }
          if (result9 !== null) {
            var result10 = parse_any(context);
            if (result10 !== null) {
              var result6 = [result9, result10];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            var result7 = [];
            var result8 = parse_any(context);
            while (result8 !== null) {
              result7.push(result8);
              var result8 = parse_any(context);
            }
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_newline(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ds, n) {return n})(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dashes(context) {
        var cacheKey = "dashes" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "-") {
            var result4 = "-";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("-"));
            }
          }
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              if (input.substr(pos, 1) === "-") {
                var result4 = "-";
                pos += 1;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("-"));
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d, ds) {return d.concat(ds.join(""))})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_opencom(context) {
        var cacheKey = "opencom" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "{-") {
          var result0 = "{-";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{-"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_closecom(context) {
        var cacheKey = "closecom" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "-}") {
          var result0 = "-}";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-}"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ncomment(context) {
        var cacheKey = "ncomment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result11 = parse_symbol(context);
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result11 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos3;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var result4 = parse_opencom(context);
          if (result4 !== null) {
            var result5 = parse_ANYseq(context);
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var result9 = parse_ncomment(context);
              if (result9 !== null) {
                var result10 = parse_ANYseq(context);
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result6.push(result8);
                var savedPos2 = pos;
                var result9 = parse_ncomment(context);
                if (result9 !== null) {
                  var result10 = parse_ANYseq(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result7 = parse_closecom(context);
                if (result7 !== null) {
                  var result3 = [result4, result5, result6, result7];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(com) {return flatten(com).join("").replace(/\S/g," ");})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANYseq(context) {
        var cacheKey = "ANYseq" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_ANY(context);
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_ANY(context);
        }
        var result0 = result1 !== null
          ? (function(as) {return as.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANY(context) {
        var cacheKey = "ANY" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result8 = parse_opencom(context);
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result7 = parse_closecom(context);
          if (result7 !== null) {
            var result6 = result7;
          } else {
            var result6 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result5 = parse_graphic(context);
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result4 = parse_whitechar(context);
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a) {return a})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any(context) {
        var cacheKey = "any" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_graphic(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_space(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_tab(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_graphic(context) {
        var cacheKey = "graphic" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result8 = parse_small(context);
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var result7 = parse_ascLarge(context);
          if (result7 !== null) {
            var result1 = result7;
          } else {
            var result6 = parse_symbol(context);
            if (result6 !== null) {
              var result1 = result6;
            } else {
              var result5 = parse_ascDigit(context);
              if (result5 !== null) {
                var result1 = result5;
              } else {
                var result4 = parse_special(context);
                if (result4 !== null) {
                  var result1 = result4;
                } else {
                  if (input.substr(pos, 1) === "\"") {
                    var result3 = "\"";
                    pos += 1;
                  } else {
                    var result3 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("\""));
                    }
                  }
                  if (result3 !== null) {
                    var result1 = result3;
                  } else {
                    if (input.substr(pos, 1) === "'") {
                      var result2 = "'";
                      pos += 1;
                    } else {
                      var result2 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("'"));
                      }
                    }
                    if (result2 !== null) {
                      var result1 = result2;
                    } else {
                      var result1 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(g) {return (g instanceof Object? g.val:g)})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_small(context) {
        var cacheKey = "small" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_ascSmall(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("_"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ascSmall(context) {
        var cacheKey = "ascSmall" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-z]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[a-z]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ascLarge(context) {
        var cacheKey = "ascLarge" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol(context) {
        var cacheKey = "symbol" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_ascSymbol(context);
        var result0 = result1 !== null
          ? (function(s) {return s})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ascSymbol(context) {
        var cacheKey = "ascSymbol" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result26 = parse_opencom(context);
        if (result26 !== null) {
          var result24 = result26;
        } else {
          var result25 = parse_closecom(context);
          if (result25 !== null) {
            var result24 = result25;
          } else {
            var result24 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result24 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "!") {
            var result23 = "!";
            pos += 1;
          } else {
            var result23 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("!"));
            }
          }
          if (result23 !== null) {
            var result3 = result23;
          } else {
            if (input.substr(pos, 1) === "#") {
              var result22 = "#";
              pos += 1;
            } else {
              var result22 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("#"));
              }
            }
            if (result22 !== null) {
              var result3 = result22;
            } else {
              if (input.substr(pos, 1) === "$") {
                var result21 = "$";
                pos += 1;
              } else {
                var result21 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("$"));
                }
              }
              if (result21 !== null) {
                var result3 = result21;
              } else {
                if (input.substr(pos, 1) === "%") {
                  var result20 = "%";
                  pos += 1;
                } else {
                  var result20 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("%"));
                  }
                }
                if (result20 !== null) {
                  var result3 = result20;
                } else {
                  if (input.substr(pos, 1) === "&") {
                    var result19 = "&";
                    pos += 1;
                  } else {
                    var result19 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("&"));
                    }
                  }
                  if (result19 !== null) {
                    var result3 = result19;
                  } else {
                    if (input.substr(pos, 1) === "*") {
                      var result18 = "*";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("*"));
                      }
                    }
                    if (result18 !== null) {
                      var result3 = result18;
                    } else {
                      if (input.substr(pos, 1) === "+") {
                        var result17 = "+";
                        pos += 1;
                      } else {
                        var result17 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("+"));
                        }
                      }
                      if (result17 !== null) {
                        var result3 = result17;
                      } else {
                        if (input.substr(pos, 1) === ".") {
                          var result16 = ".";
                          pos += 1;
                        } else {
                          var result16 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("."));
                          }
                        }
                        if (result16 !== null) {
                          var result3 = result16;
                        } else {
                          if (input.substr(pos, 1) === "/") {
                            var result15 = "/";
                            pos += 1;
                          } else {
                            var result15 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("/"));
                            }
                          }
                          if (result15 !== null) {
                            var result3 = result15;
                          } else {
                            if (input.substr(pos, 1) === "<") {
                              var result14 = "<";
                              pos += 1;
                            } else {
                              var result14 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("<"));
                              }
                            }
                            if (result14 !== null) {
                              var result3 = result14;
                            } else {
                              if (input.substr(pos, 1) === ">") {
                                var result13 = ">";
                                pos += 1;
                              } else {
                                var result13 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString(">"));
                                }
                              }
                              if (result13 !== null) {
                                var result3 = result13;
                              } else {
                                if (input.substr(pos, 1) === "=") {
                                  var result12 = "=";
                                  pos += 1;
                                } else {
                                  var result12 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("="));
                                  }
                                }
                                if (result12 !== null) {
                                  var result3 = result12;
                                } else {
                                  if (input.substr(pos, 1) === "?") {
                                    var result11 = "?";
                                    pos += 1;
                                  } else {
                                    var result11 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed(quoteString("?"));
                                    }
                                  }
                                  if (result11 !== null) {
                                    var result3 = result11;
                                  } else {
                                    if (input.substr(pos, 1) === "@") {
                                      var result10 = "@";
                                      pos += 1;
                                    } else {
                                      var result10 = null;
                                      if (context.reportMatchFailures) {
                                        matchFailed(quoteString("@"));
                                      }
                                    }
                                    if (result10 !== null) {
                                      var result3 = result10;
                                    } else {
                                      if (input.substr(pos, 1) === "\\") {
                                        var result9 = "\\";
                                        pos += 1;
                                      } else {
                                        var result9 = null;
                                        if (context.reportMatchFailures) {
                                          matchFailed(quoteString("\\"));
                                        }
                                      }
                                      if (result9 !== null) {
                                        var result3 = result9;
                                      } else {
                                        if (input.substr(pos, 1) === "^") {
                                          var result8 = "^";
                                          pos += 1;
                                        } else {
                                          var result8 = null;
                                          if (context.reportMatchFailures) {
                                            matchFailed(quoteString("^"));
                                          }
                                        }
                                        if (result8 !== null) {
                                          var result3 = result8;
                                        } else {
                                          if (input.substr(pos, 1) === "|") {
                                            var result7 = "|";
                                            pos += 1;
                                          } else {
                                            var result7 = null;
                                            if (context.reportMatchFailures) {
                                              matchFailed(quoteString("|"));
                                            }
                                          }
                                          if (result7 !== null) {
                                            var result3 = result7;
                                          } else {
                                            if (input.substr(pos, 1) === "-") {
                                              var result6 = "-";
                                              pos += 1;
                                            } else {
                                              var result6 = null;
                                              if (context.reportMatchFailures) {
                                                matchFailed(quoteString("-"));
                                              }
                                            }
                                            if (result6 !== null) {
                                              var result3 = result6;
                                            } else {
                                              if (input.substr(pos, 1) === "~") {
                                                var result5 = "~";
                                                pos += 1;
                                              } else {
                                                var result5 = null;
                                                if (context.reportMatchFailures) {
                                                  matchFailed(quoteString("~"));
                                                }
                                              }
                                              if (result5 !== null) {
                                                var result3 = result5;
                                              } else {
                                                if (input.substr(pos, 1) === ":") {
                                                  var result4 = ":";
                                                  pos += 1;
                                                } else {
                                                  var result4 = null;
                                                  if (context.reportMatchFailures) {
                                                    matchFailed(quoteString(":"));
                                                  }
                                                }
                                                if (result4 !== null) {
                                                  var result3 = result4;
                                                } else {
                                                  var result3 = null;;
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {return s})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ascDigit(context) {
        var cacheKey = "ascDigit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_octit(context) {
        var cacheKey = "octit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-7]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-7]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexit(context) {
        var cacheKey = "hexit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_ascDigit(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos).match(/^[A-F]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[A-F]");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos).match(/^[a-f]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed("[a-f]");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varid(context) {
        var cacheKey = "varid" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result10 = parse_reservedid(context);
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result10 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result3 = parse_small(context);
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_small(context);
            if (result9 !== null) {
              var result5 = result9;
            } else {
              var result8 = parse_ascLarge(context);
              if (result8 !== null) {
                var result5 = result8;
              } else {
                var result7 = parse_ascDigit(context);
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  if (input.substr(pos, 1) === "'") {
                    var result6 = "'";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("'"));
                    }
                  }
                  if (result6 !== null) {
                    var result5 = result6;
                  } else {
                    var result5 = null;;
                  };
                };
              };
            }
            while (result5 !== null) {
              result4.push(result5);
              var result9 = parse_small(context);
              if (result9 !== null) {
                var result5 = result9;
              } else {
                var result8 = parse_ascLarge(context);
                if (result8 !== null) {
                  var result5 = result8;
                } else {
                  var result7 = parse_ascDigit(context);
                  if (result7 !== null) {
                    var result5 = result7;
                  } else {
                    if (input.substr(pos, 1) === "'") {
                      var result6 = "'";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("'"));
                      }
                    }
                    if (result6 !== null) {
                      var result5 = result6;
                    } else {
                      var result5 = null;;
                    };
                  };
                };
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {return head.concat(tail.join(""))})(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conid(context) {
        var cacheKey = "conid" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_ascLarge(context);
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_small(context);
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var result7 = parse_ascLarge(context);
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_ascDigit(context);
              if (result6 !== null) {
                var result4 = result6;
              } else {
                if (input.substr(pos, 1) === "'") {
                  var result5 = "'";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("'"));
                  }
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result8 = parse_small(context);
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var result7 = parse_ascLarge(context);
              if (result7 !== null) {
                var result4 = result7;
              } else {
                var result6 = parse_ascDigit(context);
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  if (input.substr(pos, 1) === "'") {
                    var result5 = "'";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("'"));
                    }
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {return head.concat(tail.join(""))})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reservedid(context) {
        var cacheKey = "reservedid" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "hiding") {
          var result30 = "hiding";
          pos += 6;
        } else {
          var result30 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("hiding"));
          }
        }
        if (result30 !== null) {
          var result2 = result30;
        } else {
          if (input.substr(pos, 4) === "case") {
            var result29 = "case";
            pos += 4;
          } else {
            var result29 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("case"));
            }
          }
          if (result29 !== null) {
            var result2 = result29;
          } else {
            if (input.substr(pos, 5) === "class") {
              var result28 = "class";
              pos += 5;
            } else {
              var result28 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("class"));
              }
            }
            if (result28 !== null) {
              var result2 = result28;
            } else {
              if (input.substr(pos, 4) === "data") {
                var result27 = "data";
                pos += 4;
              } else {
                var result27 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("data"));
                }
              }
              if (result27 !== null) {
                var result2 = result27;
              } else {
                if (input.substr(pos, 7) === "default") {
                  var result26 = "default";
                  pos += 7;
                } else {
                  var result26 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("default"));
                  }
                }
                if (result26 !== null) {
                  var result2 = result26;
                } else {
                  if (input.substr(pos, 8) === "deriving") {
                    var result25 = "deriving";
                    pos += 8;
                  } else {
                    var result25 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("deriving"));
                    }
                  }
                  if (result25 !== null) {
                    var result2 = result25;
                  } else {
                    if (input.substr(pos, 2) === "do") {
                      var result24 = "do";
                      pos += 2;
                    } else {
                      var result24 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("do"));
                      }
                    }
                    if (result24 !== null) {
                      var result2 = result24;
                    } else {
                      if (input.substr(pos, 4) === "else") {
                        var result23 = "else";
                        pos += 4;
                      } else {
                        var result23 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("else"));
                        }
                      }
                      if (result23 !== null) {
                        var result2 = result23;
                      } else {
                        if (input.substr(pos, 7) === "foreign") {
                          var result22 = "foreign";
                          pos += 7;
                        } else {
                          var result22 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("foreign"));
                          }
                        }
                        if (result22 !== null) {
                          var result2 = result22;
                        } else {
                          if (input.substr(pos, 2) === "if") {
                            var result21 = "if";
                            pos += 2;
                          } else {
                            var result21 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("if"));
                            }
                          }
                          if (result21 !== null) {
                            var result2 = result21;
                          } else {
                            if (input.substr(pos, 6) === "import") {
                              var result20 = "import";
                              pos += 6;
                            } else {
                              var result20 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("import"));
                              }
                            }
                            if (result20 !== null) {
                              var result2 = result20;
                            } else {
                              if (input.substr(pos, 2) === "in") {
                                var result19 = "in";
                                pos += 2;
                              } else {
                                var result19 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("in"));
                                }
                              }
                              if (result19 !== null) {
                                var result2 = result19;
                              } else {
                                if (input.substr(pos, 5) === "infix") {
                                  var result18 = "infix";
                                  pos += 5;
                                } else {
                                  var result18 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("infix"));
                                  }
                                }
                                if (result18 !== null) {
                                  var result2 = result18;
                                } else {
                                  if (input.substr(pos, 6) === "infixl") {
                                    var result17 = "infixl";
                                    pos += 6;
                                  } else {
                                    var result17 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed(quoteString("infixl"));
                                    }
                                  }
                                  if (result17 !== null) {
                                    var result2 = result17;
                                  } else {
                                    if (input.substr(pos, 6) === "infixr") {
                                      var result16 = "infixr";
                                      pos += 6;
                                    } else {
                                      var result16 = null;
                                      if (context.reportMatchFailures) {
                                        matchFailed(quoteString("infixr"));
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result2 = result16;
                                    } else {
                                      if (input.substr(pos, 8) === "instance") {
                                        var result15 = "instance";
                                        pos += 8;
                                      } else {
                                        var result15 = null;
                                        if (context.reportMatchFailures) {
                                          matchFailed(quoteString("instance"));
                                        }
                                      }
                                      if (result15 !== null) {
                                        var result2 = result15;
                                      } else {
                                        if (input.substr(pos, 3) === "let") {
                                          var result14 = "let";
                                          pos += 3;
                                        } else {
                                          var result14 = null;
                                          if (context.reportMatchFailures) {
                                            matchFailed(quoteString("let"));
                                          }
                                        }
                                        if (result14 !== null) {
                                          var result2 = result14;
                                        } else {
                                          if (input.substr(pos, 6) === "module") {
                                            var result13 = "module";
                                            pos += 6;
                                          } else {
                                            var result13 = null;
                                            if (context.reportMatchFailures) {
                                              matchFailed(quoteString("module"));
                                            }
                                          }
                                          if (result13 !== null) {
                                            var result2 = result13;
                                          } else {
                                            if (input.substr(pos, 7) === "newtype") {
                                              var result12 = "newtype";
                                              pos += 7;
                                            } else {
                                              var result12 = null;
                                              if (context.reportMatchFailures) {
                                                matchFailed(quoteString("newtype"));
                                              }
                                            }
                                            if (result12 !== null) {
                                              var result2 = result12;
                                            } else {
                                              if (input.substr(pos, 2) === "of") {
                                                var result11 = "of";
                                                pos += 2;
                                              } else {
                                                var result11 = null;
                                                if (context.reportMatchFailures) {
                                                  matchFailed(quoteString("of"));
                                                }
                                              }
                                              if (result11 !== null) {
                                                var result2 = result11;
                                              } else {
                                                if (input.substr(pos, 4) === "then") {
                                                  var result10 = "then";
                                                  pos += 4;
                                                } else {
                                                  var result10 = null;
                                                  if (context.reportMatchFailures) {
                                                    matchFailed(quoteString("then"));
                                                  }
                                                }
                                                if (result10 !== null) {
                                                  var result2 = result10;
                                                } else {
                                                  if (input.substr(pos, 4) === "type") {
                                                    var result9 = "type";
                                                    pos += 4;
                                                  } else {
                                                    var result9 = null;
                                                    if (context.reportMatchFailures) {
                                                      matchFailed(quoteString("type"));
                                                    }
                                                  }
                                                  if (result9 !== null) {
                                                    var result2 = result9;
                                                  } else {
                                                    if (input.substr(pos, 5) === "where") {
                                                      var result8 = "where";
                                                      pos += 5;
                                                    } else {
                                                      var result8 = null;
                                                      if (context.reportMatchFailures) {
                                                        matchFailed(quoteString("where"));
                                                      }
                                                    }
                                                    if (result8 !== null) {
                                                      var result2 = result8;
                                                    } else {
                                                      if (input.substr(pos, 1) === "_") {
                                                        var result7 = "_";
                                                        pos += 1;
                                                      } else {
                                                        var result7 = null;
                                                        if (context.reportMatchFailures) {
                                                          matchFailed(quoteString("_"));
                                                        }
                                                      }
                                                      if (result7 !== null) {
                                                        var result2 = result7;
                                                      } else {
                                                        var result2 = null;;
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          var result6 = parse_varid(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_reservedid(context);
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          context.reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(res) {return {val: res, typ: res}})(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varsym(context) {
        var cacheKey = "varsym" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result9 = parse_reservedop(context);
        if (result9 !== null) {
          var result5 = result9;
        } else {
          var result8 = parse_dashes(context);
          if (result8 !== null) {
            var result5 = result8;
          } else {
            var result7 = parse_escape(context);
            if (result7 !== null) {
              var result5 = result7;
            } else {
              if (input.substr(pos, 1) === ":") {
                var result6 = ":";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(":"));
                }
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result4 = parse_symbol(context);
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              var result4 = parse_symbol(context);
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {return s.join("")})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_consym(context) {
        var cacheKey = "consym" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result7 = parse_reservedop(context);
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos2;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(":"));
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result6 = parse_symbol(context);
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_symbol(context);
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {return flatten(s).join("")})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reservedop(context) {
        var cacheKey = "reservedop" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "..") {
          var result20 = "..";
          pos += 2;
        } else {
          var result20 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(".."));
          }
        }
        if (result20 !== null) {
          var result2 = result20;
        } else {
          if (input.substr(pos, 2) === "::") {
            var result19 = "::";
            pos += 2;
          } else {
            var result19 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("::"));
            }
          }
          if (result19 !== null) {
            var result2 = result19;
          } else {
            if (input.substr(pos, 1) === ":") {
              var result18 = ":";
              pos += 1;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(":"));
              }
            }
            if (result18 !== null) {
              var result2 = result18;
            } else {
              if (input.substr(pos, 2) === "=>") {
                var result17 = "=>";
                pos += 2;
              } else {
                var result17 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("=>"));
                }
              }
              if (result17 !== null) {
                var result2 = result17;
              } else {
                if (input.substr(pos, 1) === "=") {
                  var result16 = "=";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("="));
                  }
                }
                if (result16 !== null) {
                  var result2 = result16;
                } else {
                  var savedPos2 = pos;
                  if (input.substr(pos, 1) === "\\") {
                    var result13 = "\\";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("\\"));
                    }
                  }
                  if (result13 !== null) {
                    var savedPos3 = pos;
                    var savedReportMatchFailuresVar1 = context.reportMatchFailures;
                    context.reportMatchFailures = false;
                    var result15 = parse_escapestuff(context);
                    context.reportMatchFailures = savedReportMatchFailuresVar1;
                    if (result15 === null) {
                      var result14 = '';
                    } else {
                      var result14 = null;
                      pos = savedPos3;
                    }
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                  if (result12 !== null) {
                    var result2 = result12;
                  } else {
                    if (input.substr(pos, 1) === "|") {
                      var result11 = "|";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("|"));
                      }
                    }
                    if (result11 !== null) {
                      var result2 = result11;
                    } else {
                      if (input.substr(pos, 2) === "<-") {
                        var result10 = "<-";
                        pos += 2;
                      } else {
                        var result10 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("<-"));
                        }
                      }
                      if (result10 !== null) {
                        var result2 = result10;
                      } else {
                        if (input.substr(pos, 2) === "->") {
                          var result9 = "->";
                          pos += 2;
                        } else {
                          var result9 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("->"));
                          }
                        }
                        if (result9 !== null) {
                          var result2 = result9;
                        } else {
                          if (input.substr(pos, 1) === "@") {
                            var result8 = "@";
                            pos += 1;
                          } else {
                            var result8 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("@"));
                            }
                          }
                          if (result8 !== null) {
                            var result2 = result8;
                          } else {
                            if (input.substr(pos, 1) === "~") {
                              var result7 = "~";
                              pos += 1;
                            } else {
                              var result7 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("~"));
                              }
                            }
                            if (result7 !== null) {
                              var result2 = result7;
                            } else {
                              var result2 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          var result6 = parse_varsym(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_consym(context);
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          context.reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op) {return {val: (op instanceof Array)? op.join(""): op, typ: (op instanceof Array)? op.join(""): op}})(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qvarid(context) {
        var cacheKey = "qvarid" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos5 = pos;
        var result11 = parse_conid(context);
        if (result11 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result12 = ".";
            pos += 1;
          } else {
            var result12 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result12 !== null) {
            var result10 = [result11, result12];
          } else {
            var result10 = null;
            pos = savedPos5;
          }
        } else {
          var result10 = null;
          pos = savedPos5;
        }
        if (result10 !== null) {
          var result2 = [];
          while (result10 !== null) {
            result2.push(result10);
            var savedPos5 = pos;
            var result11 = parse_conid(context);
            if (result11 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result12 = ".";
                pos += 1;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos5;
              }
            } else {
              var result10 = null;
              pos = savedPos5;
            }
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar1 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          context.reportMatchFailures = savedReportMatchFailuresVar1;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos4;
          }
          if (result7 !== null) {
            var result8 = parse_varid(context);
            if (result8 !== null) {
              var result4 = [result7, result8];
            } else {
              var result4 = null;
              pos = savedPos3;
            }
          } else {
            var result4 = null;
            pos = savedPos3;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs, ref) {return {val: flatten([qs, ref[0]]).join(""), typ: "qvarid", qual: flatten(qs).join("")}})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qconid(context) {
        var cacheKey = "qconid" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos5 = pos;
        var result11 = parse_conid(context);
        if (result11 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result12 = ".";
            pos += 1;
          } else {
            var result12 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result12 !== null) {
            var result10 = [result11, result12];
          } else {
            var result10 = null;
            pos = savedPos5;
          }
        } else {
          var result10 = null;
          pos = savedPos5;
        }
        if (result10 !== null) {
          var result2 = [];
          while (result10 !== null) {
            result2.push(result10);
            var savedPos5 = pos;
            var result11 = parse_conid(context);
            if (result11 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result12 = ".";
                pos += 1;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos5;
              }
            } else {
              var result10 = null;
              pos = savedPos5;
            }
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar1 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          context.reportMatchFailures = savedReportMatchFailuresVar1;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos4;
          }
          if (result7 !== null) {
            var result8 = parse_conid(context);
            if (result8 !== null) {
              var result4 = [result7, result8];
            } else {
              var result4 = null;
              pos = savedPos3;
            }
          } else {
            var result4 = null;
            pos = savedPos3;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs, ref) {return {val: flatten([qs, ref[0]]).join(""), typ: "qconid", qual: flatten(qs).join("")}})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qvarsym(context) {
        var cacheKey = "qvarsym" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        var result8 = parse_conid(context);
        if (result8 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        if (result7 !== null) {
          var result2 = [];
          while (result7 !== null) {
            result2.push(result7);
            var savedPos3 = pos;
            var result8 = parse_conid(context);
            if (result8 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result9 = ".";
                pos += 1;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var result4 = parse_varsym(context);
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs, ref) {return {val: flatten([qs, ref[0]]).join(""), typ: "qvarsym", qual: flatten(qs).join("")}})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qconsym(context) {
        var cacheKey = "qconsym" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos5 = pos;
        var result11 = parse_conid(context);
        if (result11 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result12 = ".";
            pos += 1;
          } else {
            var result12 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result12 !== null) {
            var result10 = [result11, result12];
          } else {
            var result10 = null;
            pos = savedPos5;
          }
        } else {
          var result10 = null;
          pos = savedPos5;
        }
        if (result10 !== null) {
          var result2 = [];
          while (result10 !== null) {
            result2.push(result10);
            var savedPos5 = pos;
            var result11 = parse_conid(context);
            if (result11 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result12 = ".";
                pos += 1;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos5;
              }
            } else {
              var result10 = null;
              pos = savedPos5;
            }
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar1 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          context.reportMatchFailures = savedReportMatchFailuresVar1;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos4;
          }
          if (result7 !== null) {
            var result8 = parse_consym(context);
            if (result8 !== null) {
              var result4 = [result7, result8];
            } else {
              var result4 = null;
              pos = savedPos3;
            }
          } else {
            var result4 = null;
            pos = savedPos3;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs, ref) {return {val: flatten([qs, ref[0]]).join(""), typ: "qconsym", qual: flatten(qs).join("")}})(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varid_e(context) {
        var cacheKey = "varid_e" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar1 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 1) === ".") {
          var result6 = ".";
          pos += 1;
        } else {
          var result6 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("."));
          }
        }
        context.reportMatchFailures = savedReportMatchFailuresVar1;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos2;
        }
        if (result2 !== null) {
          var result3 = parse_varid(context);
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) {return {val: v, typ: "varid"}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conid_e(context) {
        var cacheKey = "conid_e" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar1 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 1) === ".") {
          var result6 = ".";
          pos += 1;
        } else {
          var result6 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("."));
          }
        }
        context.reportMatchFailures = savedReportMatchFailuresVar1;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos2;
        }
        if (result2 !== null) {
          var result3 = parse_conid(context);
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {return {val: c, typ: "conid"}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varsym_e(context) {
        var cacheKey = "varsym_e" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_varsym(context);
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          context.reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) {return {val: v, typ: "varsym"}})(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_consym_e(context) {
        var cacheKey = "consym_e" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar1 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 1) === ".") {
          var result6 = ".";
          pos += 1;
        } else {
          var result6 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("."));
          }
        }
        context.reportMatchFailures = savedReportMatchFailuresVar1;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos2;
        }
        if (result2 !== null) {
          var result3 = parse_consym(context);
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            context.reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {return {val: c, typ: "consym"}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_decimal(context) {
        var cacheKey = "decimal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_ascDigit(context);
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_ascDigit(context);
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(d) {return d.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_octal(context) {
        var cacheKey = "octal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_octit(context);
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_octit(context);
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(o) {return o.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexadecimal(context) {
        var cacheKey = "hexadecimal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_hexit(context);
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_hexit(context);
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(h) {return h.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer(context) {
        var cacheKey = "integer" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result13 = parse_notdecimal(context);
        if (result13 !== null) {
          var result2 = result13;
        } else {
          var savedPos2 = pos;
          var result6 = parse_decimal(context);
          if (result6 !== null) {
            var savedPos3 = pos;
            var savedReportMatchFailuresVar1 = context.reportMatchFailures;
            context.reportMatchFailures = false;
            if (input.substr(pos, 1) === "o") {
              var result12 = "o";
              pos += 1;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("o"));
              }
            }
            if (result12 !== null) {
              var result8 = result12;
            } else {
              if (input.substr(pos, 1) === "O") {
                var result11 = "O";
                pos += 1;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("O"));
                }
              }
              if (result11 !== null) {
                var result8 = result11;
              } else {
                if (input.substr(pos, 1) === "x") {
                  var result10 = "x";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("x"));
                  }
                }
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  if (input.substr(pos, 1) === "X") {
                    var result9 = "X";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("X"));
                    }
                  }
                  if (result9 !== null) {
                    var result8 = result9;
                  } else {
                    var result8 = null;;
                  };
                };
              };
            }
            context.reportMatchFailures = savedReportMatchFailuresVar1;
            if (result8 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result2 = result5;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          context.reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {return {val: i.join(""), typ: "integer"}})(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_notdecimal(context) {
        var cacheKey = "notdecimal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "0o") {
          var result11 = "0o";
          pos += 2;
        } else {
          var result11 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("0o"));
          }
        }
        if (result11 !== null) {
          var result12 = parse_octal(context);
          if (result12 !== null) {
            var result10 = [result11, result12];
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "0O") {
            var result8 = "0O";
            pos += 2;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("0O"));
            }
          }
          if (result8 !== null) {
            var result9 = parse_octal(context);
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "0x") {
              var result5 = "0x";
              pos += 2;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("0x"));
              }
            }
            if (result5 !== null) {
              var result6 = parse_hexadecimal(context);
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 2) === "0X") {
                var result2 = "0X";
                pos += 2;
              } else {
                var result2 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("0X"));
                }
              }
              if (result2 !== null) {
                var result3 = parse_hexadecimal(context);
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float(context) {
        var cacheKey = "float" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result6 = parse_decimal(context);
        if (result6 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result7 = ".";
            pos += 1;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result7 !== null) {
            var result8 = parse_decimal(context);
            if (result8 !== null) {
              var result10 = parse_exponent(context);
              var result9 = result10 !== null ? result10 : '';
              if (result9 !== null) {
                var result5 = [result6, result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var savedPos0 = pos;
          var result3 = parse_decimal(context);
          if (result3 !== null) {
            var result4 = parse_exponent(context);
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(f) {return {val: f.join(""), typ: "float"}})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exponent(context) {
        var cacheKey = "exponent" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "e") {
          var result9 = "e";
          pos += 1;
        } else {
          var result9 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("e"));
          }
        }
        if (result9 !== null) {
          var result2 = result9;
        } else {
          if (input.substr(pos, 1) === "E") {
            var result8 = "E";
            pos += 1;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("E"));
            }
          }
          if (result8 !== null) {
            var result2 = result8;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "+") {
            var result7 = "+";
            pos += 1;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("+"));
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("-"));
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_decimal(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) {return e.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_char(context) {
        var cacheKey = "char" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result2 = "'";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("'"));
          }
        }
        if (result2 !== null) {
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedReportMatchFailuresVar1 = context.reportMatchFailures;
          context.reportMatchFailures = false;
          if (input.substr(pos, 1) === "'") {
            var result15 = "'";
            pos += 1;
          } else {
            var result15 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("'"));
            }
          }
          if (result15 !== null) {
            var result13 = result15;
          } else {
            if (input.substr(pos, 1) === "\\") {
              var result14 = "\\";
              pos += 1;
            } else {
              var result14 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\\"));
              }
            }
            if (result14 !== null) {
              var result13 = result14;
            } else {
              var result13 = null;;
            };
          }
          context.reportMatchFailures = savedReportMatchFailuresVar1;
          if (result13 === null) {
            var result11 = '';
          } else {
            var result11 = null;
            pos = savedPos4;
          }
          if (result11 !== null) {
            var result12 = parse_graphic(context);
            if (result12 !== null) {
              var result10 = [result11, result12];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          if (result10 !== null) {
            var result3 = result10;
          } else {
            var result9 = parse_space(context);
            if (result9 !== null) {
              var result3 = result9;
            } else {
              var savedPos1 = pos;
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = context.reportMatchFailures;
              context.reportMatchFailures = false;
              if (input.substr(pos, 2) === "\\&") {
                var result8 = "\\&";
                pos += 2;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("\\&"));
                }
              }
              context.reportMatchFailures = savedReportMatchFailuresVar0;
              if (result8 === null) {
                var result6 = '';
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result7 = parse_escape(context);
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result3 = null;;
              };
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result4 = "'";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {return {val: ("'" + c.join("") + "'"), typ: "char"}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string(context) {
        var cacheKey = "string" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result5 = parse_stringchar(context);
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_stringchar(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(bod) {return {val: ('"' + bod.join("") + '"'), typ: "string"}})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stringchar(context) {
        var cacheKey = "stringchar" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 1) === "\"") {
          var result8 = "\"";
          pos += 1;
        } else {
          var result8 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result8 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          var result7 = parse_space(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_escape(context);
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_graphic(context);
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_gap(context);
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ch) {return ch})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_escape(context) {
        var cacheKey = "escape" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result2 = "\\";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_escapestuff(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(esc) {return esc.join("")})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_escapestuff(context) {
        var cacheKey = "escapestuff" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_charesc(context);
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_ascii(context);
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_decimal(context);
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "o") {
                var result5 = "o";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("o"));
                }
              }
              if (result5 !== null) {
                var result6 = parse_octal(context);
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 1) === "x") {
                  var result2 = "x";
                  pos += 1;
                } else {
                  var result2 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("x"));
                  }
                }
                if (result2 !== null) {
                  var result3 = parse_hexadecimal(context);
                  if (result3 !== null) {
                    var result1 = [result2, result3];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_charesc(context) {
        var cacheKey = "charesc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "a") {
          var result11 = "a";
          pos += 1;
        } else {
          var result11 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("a"));
          }
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          if (input.substr(pos, 1) === "b") {
            var result10 = "b";
            pos += 1;
          } else {
            var result10 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("b"));
            }
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            if (input.substr(pos, 1) === "f") {
              var result9 = "f";
              pos += 1;
            } else {
              var result9 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("f"));
              }
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              if (input.substr(pos, 1) === "n") {
                var result8 = "n";
                pos += 1;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("n"));
                }
              }
              if (result8 !== null) {
                var result0 = result8;
              } else {
                if (input.substr(pos, 1) === "r") {
                  var result7 = "r";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("r"));
                  }
                }
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result6 = "t";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("t"));
                    }
                  }
                  if (result6 !== null) {
                    var result0 = result6;
                  } else {
                    if (input.substr(pos, 1) === "v") {
                      var result5 = "v";
                      pos += 1;
                    } else {
                      var result5 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("v"));
                      }
                    }
                    if (result5 !== null) {
                      var result0 = result5;
                    } else {
                      if (input.substr(pos, 1) === "\\") {
                        var result4 = "\\";
                        pos += 1;
                      } else {
                        var result4 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("\\"));
                        }
                      }
                      if (result4 !== null) {
                        var result0 = result4;
                      } else {
                        if (input.substr(pos, 1) === "\"") {
                          var result3 = "\"";
                          pos += 1;
                        } else {
                          var result3 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("\""));
                          }
                        }
                        if (result3 !== null) {
                          var result0 = result3;
                        } else {
                          if (input.substr(pos, 1) === "'") {
                            var result2 = "'";
                            pos += 1;
                          } else {
                            var result2 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("'"));
                            }
                          }
                          if (result2 !== null) {
                            var result0 = result2;
                          } else {
                            if (input.substr(pos, 1) === "&") {
                              var result1 = "&";
                              pos += 1;
                            } else {
                              var result1 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("&"));
                              }
                            }
                            if (result1 !== null) {
                              var result0 = result1;
                            } else {
                              var result0 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ascii(context) {
        var cacheKey = "ascii" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "^") {
          var result35 = "^";
          pos += 1;
        } else {
          var result35 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("^"));
          }
        }
        if (result35 !== null) {
          var result36 = parse_cntrl(context);
          if (result36 !== null) {
            if (input.substr(pos, 3) === "&#0") {
              var result37 = "&#0";
              pos += 3;
            } else {
              var result37 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("&#0"));
              }
            }
            if (result37 !== null) {
              var result34 = [result35, result36, result37];
            } else {
              var result34 = null;
              pos = savedPos0;
            }
          } else {
            var result34 = null;
            pos = savedPos0;
          }
        } else {
          var result34 = null;
          pos = savedPos0;
        }
        if (result34 !== null) {
          var result0 = result34;
        } else {
          if (input.substr(pos, 3) === "&#1") {
            var result33 = "&#1";
            pos += 3;
          } else {
            var result33 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("&#1"));
            }
          }
          if (result33 !== null) {
            var result0 = result33;
          } else {
            if (input.substr(pos, 3) === "&#2") {
              var result32 = "&#2";
              pos += 3;
            } else {
              var result32 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("&#2"));
              }
            }
            if (result32 !== null) {
              var result0 = result32;
            } else {
              if (input.substr(pos, 3) === "&#3") {
                var result31 = "&#3";
                pos += 3;
              } else {
                var result31 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("&#3"));
                }
              }
              if (result31 !== null) {
                var result0 = result31;
              } else {
                if (input.substr(pos, 3) === "&#4") {
                  var result30 = "&#4";
                  pos += 3;
                } else {
                  var result30 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("&#4"));
                  }
                }
                if (result30 !== null) {
                  var result0 = result30;
                } else {
                  if (input.substr(pos, 3) === "&#5") {
                    var result29 = "&#5";
                    pos += 3;
                  } else {
                    var result29 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("&#5"));
                    }
                  }
                  if (result29 !== null) {
                    var result0 = result29;
                  } else {
                    if (input.substr(pos, 3) === "&#6") {
                      var result28 = "&#6";
                      pos += 3;
                    } else {
                      var result28 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("&#6"));
                      }
                    }
                    if (result28 !== null) {
                      var result0 = result28;
                    } else {
                      if (input.substr(pos, 3) === "&#7") {
                        var result27 = "&#7";
                        pos += 3;
                      } else {
                        var result27 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("&#7"));
                        }
                      }
                      if (result27 !== null) {
                        var result0 = result27;
                      } else {
                        if (input.substr(pos, 3) === "&#8") {
                          var result26 = "&#8";
                          pos += 3;
                        } else {
                          var result26 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("&#8"));
                          }
                        }
                        if (result26 !== null) {
                          var result0 = result26;
                        } else {
                          if (input.substr(pos, 3) === "&#9") {
                            var result25 = "&#9";
                            pos += 3;
                          } else {
                            var result25 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("&#9"));
                            }
                          }
                          if (result25 !== null) {
                            var result0 = result25;
                          } else {
                            if (input.substr(pos, 4) === "&#10") {
                              var result24 = "&#10";
                              pos += 4;
                            } else {
                              var result24 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("&#10"));
                              }
                            }
                            if (result24 !== null) {
                              var result0 = result24;
                            } else {
                              if (input.substr(pos, 4) === "&#11") {
                                var result23 = "&#11";
                                pos += 4;
                              } else {
                                var result23 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("&#11"));
                                }
                              }
                              if (result23 !== null) {
                                var result0 = result23;
                              } else {
                                if (input.substr(pos, 4) === "&#12") {
                                  var result22 = "&#12";
                                  pos += 4;
                                } else {
                                  var result22 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("&#12"));
                                  }
                                }
                                if (result22 !== null) {
                                  var result0 = result22;
                                } else {
                                  if (input.substr(pos, 4) === "&#13") {
                                    var result21 = "&#13";
                                    pos += 4;
                                  } else {
                                    var result21 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed(quoteString("&#13"));
                                    }
                                  }
                                  if (result21 !== null) {
                                    var result0 = result21;
                                  } else {
                                    if (input.substr(pos, 4) === "&#14") {
                                      var result20 = "&#14";
                                      pos += 4;
                                    } else {
                                      var result20 = null;
                                      if (context.reportMatchFailures) {
                                        matchFailed(quoteString("&#14"));
                                      }
                                    }
                                    if (result20 !== null) {
                                      var result0 = result20;
                                    } else {
                                      if (input.substr(pos, 4) === "&#15") {
                                        var result19 = "&#15";
                                        pos += 4;
                                      } else {
                                        var result19 = null;
                                        if (context.reportMatchFailures) {
                                          matchFailed(quoteString("&#15"));
                                        }
                                      }
                                      if (result19 !== null) {
                                        var result0 = result19;
                                      } else {
                                        if (input.substr(pos, 4) === "&#16") {
                                          var result18 = "&#16";
                                          pos += 4;
                                        } else {
                                          var result18 = null;
                                          if (context.reportMatchFailures) {
                                            matchFailed(quoteString("&#16"));
                                          }
                                        }
                                        if (result18 !== null) {
                                          var result0 = result18;
                                        } else {
                                          if (input.substr(pos, 4) === "&#17") {
                                            var result17 = "&#17";
                                            pos += 4;
                                          } else {
                                            var result17 = null;
                                            if (context.reportMatchFailures) {
                                              matchFailed(quoteString("&#17"));
                                            }
                                          }
                                          if (result17 !== null) {
                                            var result0 = result17;
                                          } else {
                                            if (input.substr(pos, 4) === "&#18") {
                                              var result16 = "&#18";
                                              pos += 4;
                                            } else {
                                              var result16 = null;
                                              if (context.reportMatchFailures) {
                                                matchFailed(quoteString("&#18"));
                                              }
                                            }
                                            if (result16 !== null) {
                                              var result0 = result16;
                                            } else {
                                              if (input.substr(pos, 4) === "&#19") {
                                                var result15 = "&#19";
                                                pos += 4;
                                              } else {
                                                var result15 = null;
                                                if (context.reportMatchFailures) {
                                                  matchFailed(quoteString("&#19"));
                                                }
                                              }
                                              if (result15 !== null) {
                                                var result0 = result15;
                                              } else {
                                                if (input.substr(pos, 4) === "&#20") {
                                                  var result14 = "&#20";
                                                  pos += 4;
                                                } else {
                                                  var result14 = null;
                                                  if (context.reportMatchFailures) {
                                                    matchFailed(quoteString("&#20"));
                                                  }
                                                }
                                                if (result14 !== null) {
                                                  var result0 = result14;
                                                } else {
                                                  if (input.substr(pos, 4) === "&#21") {
                                                    var result13 = "&#21";
                                                    pos += 4;
                                                  } else {
                                                    var result13 = null;
                                                    if (context.reportMatchFailures) {
                                                      matchFailed(quoteString("&#21"));
                                                    }
                                                  }
                                                  if (result13 !== null) {
                                                    var result0 = result13;
                                                  } else {
                                                    if (input.substr(pos, 4) === "&#22") {
                                                      var result12 = "&#22";
                                                      pos += 4;
                                                    } else {
                                                      var result12 = null;
                                                      if (context.reportMatchFailures) {
                                                        matchFailed(quoteString("&#22"));
                                                      }
                                                    }
                                                    if (result12 !== null) {
                                                      var result0 = result12;
                                                    } else {
                                                      if (input.substr(pos, 4) === "&#23") {
                                                        var result11 = "&#23";
                                                        pos += 4;
                                                      } else {
                                                        var result11 = null;
                                                        if (context.reportMatchFailures) {
                                                          matchFailed(quoteString("&#23"));
                                                        }
                                                      }
                                                      if (result11 !== null) {
                                                        var result0 = result11;
                                                      } else {
                                                        if (input.substr(pos, 4) === "&#24") {
                                                          var result10 = "&#24";
                                                          pos += 4;
                                                        } else {
                                                          var result10 = null;
                                                          if (context.reportMatchFailures) {
                                                            matchFailed(quoteString("&#24"));
                                                          }
                                                        }
                                                        if (result10 !== null) {
                                                          var result0 = result10;
                                                        } else {
                                                          if (input.substr(pos, 4) === "&#25") {
                                                            var result9 = "&#25";
                                                            pos += 4;
                                                          } else {
                                                            var result9 = null;
                                                            if (context.reportMatchFailures) {
                                                              matchFailed(quoteString("&#25"));
                                                            }
                                                          }
                                                          if (result9 !== null) {
                                                            var result0 = result9;
                                                          } else {
                                                            if (input.substr(pos, 4) === "&#26") {
                                                              var result8 = "&#26";
                                                              pos += 4;
                                                            } else {
                                                              var result8 = null;
                                                              if (context.reportMatchFailures) {
                                                                matchFailed(quoteString("&#26"));
                                                              }
                                                            }
                                                            if (result8 !== null) {
                                                              var result0 = result8;
                                                            } else {
                                                              if (input.substr(pos, 4) === "&#27") {
                                                                var result7 = "&#27";
                                                                pos += 4;
                                                              } else {
                                                                var result7 = null;
                                                                if (context.reportMatchFailures) {
                                                                  matchFailed(quoteString("&#27"));
                                                                }
                                                              }
                                                              if (result7 !== null) {
                                                                var result0 = result7;
                                                              } else {
                                                                if (input.substr(pos, 4) === "&#28") {
                                                                  var result6 = "&#28";
                                                                  pos += 4;
                                                                } else {
                                                                  var result6 = null;
                                                                  if (context.reportMatchFailures) {
                                                                    matchFailed(quoteString("&#28"));
                                                                  }
                                                                }
                                                                if (result6 !== null) {
                                                                  var result0 = result6;
                                                                } else {
                                                                  if (input.substr(pos, 4) === "&#29") {
                                                                    var result5 = "&#29";
                                                                    pos += 4;
                                                                  } else {
                                                                    var result5 = null;
                                                                    if (context.reportMatchFailures) {
                                                                      matchFailed(quoteString("&#29"));
                                                                    }
                                                                  }
                                                                  if (result5 !== null) {
                                                                    var result0 = result5;
                                                                  } else {
                                                                    if (input.substr(pos, 4) === "&#30") {
                                                                      var result4 = "&#30";
                                                                      pos += 4;
                                                                    } else {
                                                                      var result4 = null;
                                                                      if (context.reportMatchFailures) {
                                                                        matchFailed(quoteString("&#30"));
                                                                      }
                                                                    }
                                                                    if (result4 !== null) {
                                                                      var result0 = result4;
                                                                    } else {
                                                                      if (input.substr(pos, 4) === "&#31") {
                                                                        var result3 = "&#31";
                                                                        pos += 4;
                                                                      } else {
                                                                        var result3 = null;
                                                                        if (context.reportMatchFailures) {
                                                                          matchFailed(quoteString("&#31"));
                                                                        }
                                                                      }
                                                                      if (result3 !== null) {
                                                                        var result0 = result3;
                                                                      } else {
                                                                        if (input.substr(pos, 4) === "&#32") {
                                                                          var result2 = "&#32";
                                                                          pos += 4;
                                                                        } else {
                                                                          var result2 = null;
                                                                          if (context.reportMatchFailures) {
                                                                            matchFailed(quoteString("&#32"));
                                                                          }
                                                                        }
                                                                        if (result2 !== null) {
                                                                          var result0 = result2;
                                                                        } else {
                                                                          if (input.substr(pos, 5) === "&#127") {
                                                                            var result1 = "&#127";
                                                                            pos += 5;
                                                                          } else {
                                                                            var result1 = null;
                                                                            if (context.reportMatchFailures) {
                                                                              matchFailed(quoteString("&#127"));
                                                                            }
                                                                          }
                                                                          if (result1 !== null) {
                                                                            var result0 = result1;
                                                                          } else {
                                                                            var result0 = null;;
                                                                          };
                                                                        };
                                                                      };
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cntrl(context) {
        var cacheKey = "cntrl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_ascLarge(context);
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "@") {
            var result6 = "@";
            pos += 1;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("@"));
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 1) === "[") {
              var result5 = "[";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("["));
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              if (input.substr(pos, 1) === "\\") {
                var result4 = "\\";
                pos += 1;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("\\"));
                }
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                if (input.substr(pos, 1) === "]") {
                  var result3 = "]";
                  pos += 1;
                } else {
                  var result3 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("]"));
                  }
                }
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos, 1) === "^") {
                    var result2 = "^";
                    pos += 1;
                  } else {
                    var result2 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("^"));
                    }
                  }
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    if (input.substr(pos, 1) === "_") {
                      var result1 = "_";
                      pos += 1;
                    } else {
                      var result1 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("_"));
                      }
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gap(context) {
        var cacheKey = "gap" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result1 !== null) {
          var result4 = parse_whitechar(context);
          if (result4 !== null) {
            var result2 = [];
            while (result4 !== null) {
              result2.push(result4);
              var result4 = parse_whitechar(context);
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "\\") {
              var result3 = "\\";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\\"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      function flatten(array){
          var flat = [];
          for (var i = 0, l = array.length; i < l; i++){
              var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();
              if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? flatten(array[i]) : array[i]); }
          }
          return flat;
      }
      
      var result = parse_start({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
