NOTES FOR PRESENTATION:

Intro:
	* Titelsida
	* Inledningssida
		- Översikt över webbprogrammering
			 ~ Beskrivande bild över klient-serverkommunikation
			 ~ Javascript som de facto standard för beräkningar på klientsidan
			 	% Alternativ: plugins, t.ex. Java applets & flash
	* Vad är JavaScript?
		- Dynamiskt och svagt typat
		- funktioner med godtyckligt antal parametrar
		- Imperativt
		- objektorienterat via prototyper
		- funktioner som första klassens objekt
		- endast abstraktion genom funktioner
    * Varför behövs en abstraktion över JavaScript?
        - Exempel på lång, svårläslig kod.
        - "Hitta typfelet"
        - Stora, modulära program behöver modulsystem. Javascript har inget.
            ~ Det finns bibliotek som en lösning. Är det en bra lösning?
            	% Förklara; abstraktion genom funktioner.
                % Problem: Ad-hoc-lösning som saknar garantier. 
                % Svårt att hitta fel utan garantier. EXEMPEL
    * Exempel på liknande abstraktioner:
        - Google Web toolkit.
            ~ Insert info here.
        - Haskellimplementationer
        	~ Serverramverk
        		% Happstack
        		% Yesod
        	~ Kompilatorer under utveckling
        		% GHCjs
        		% UHC
    * Varför använda just Haskell till detta?
        - Vi är Haskellprogrammerare, klart vi vill använda Haskell till allt.
        - Använda redan existerande Haskellkod.
        - Kraftfullt typsystem. "Hitta typfelet"
        - Modulsystem. 
        - Lathet.

Demonstration:
	* Visa ett exempel på användande.

Produkten:
    * Översikt av kompilering
    * Snabb introduktion till JSHC och dess programstruktur.

Diskussion/avslut:
    * Problem under arbetet.
    	- Dynamisk typning.
        - Kontroll av sinsemellan rekursiva moduler och deklarationer.
    * Framtiden?
    	- syntaxgrejer, sections, infix i patterns
        - typklasser
        - (ffi)
        - rekursiva moduler

